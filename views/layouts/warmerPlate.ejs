<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>OYMIS</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">
  <link rel="stylesheet" href="stylesheets/main.css">
</head>
<body class="d-flex flex-column vh-100 ">
    <%- include('../partials/header') %> 
  <main class="container mt-5">
    <%-body %> 
  </main>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js" integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js" integrity="sha384-mQ93GR66B00ZXjt0YO5KlohRA5SY2XofN4zfuZxLkoj1gXtW8ANNCe9d5Y3eG5eD" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bs-custom-file-input/dist/bs-custom-file-input.min.js"></script>

   <script>
      //Async Timeout Function
      const delay = wait => new Promise(res => setTimeout(res, wait)); 

      const write = async (element, text, delayTime=500, waitTime=1000) => {
          let temp = "";
          for(let x in text){
              temp += text[x];

              await delay(delayTime);
              element.textContent = temp + "|";
          }
          //pause 
          await delay(waitTime);
          //erase
          await erase(element, text, delayTime);

          return;
      }

      const erase = async (element, text, delayTime) => {
          //Loop through the text backwards
          for (let i = text.length - 1; i >= 0; i--){
              //pause
              await delay(delayTime);
              //Slice the text
              //Add the pipe after the last character
              element.textContent = text.slice(0, i) + "|";
          }
          return;
      }

      /**
      * 
      * @param {elementNode} Element your HTML DOM Element
      * @param {String | Array} text The text you want to write
      * @param {Number} loopTimes Number of times to repeat the write on.
      * @param {Number} delayTime Time delay between each characters in seconds
      * @param {Number} waitTime Time to wait before erasing a text in seconds
      */
      const writeOn = async (element, text = null, loopTimes = null, delayTime = 0.1, waitTime = 1) => {

          let i = 0

          // Time in milliseconds
          const newDelayTime = delayTime * 1000
          const newWaitTime = waitTime * 1000

          // Check if text was String
          if (typeof text === 'string'){
              while (true) {
                  if (loopTimes && i === loopTimes) break
                  await write(element, text, newDelayTime, newWaitTime)
                  i++;
              }
          }
          
          // Check if text is an Array
          if (text.isArray()) {
              
              let j = 0
              
              while (true) {
                  if (loopTimes && i === loopTimes) break
                  await write(element, list[j], newDelayTime, newWaitTime)
                  j++
                  if (j === list.length) {
                      j = 0
                      i++
                  }
              }
          }
      }

    let writeOnElement = document.querySelector(".write-on-text");

    const text = "Welcome To Oyo State PMS Management System";

    const textArray = ["Welcome", "To", "Oyo",  "State", "PMS", "System"];

    // writeOn(writeOnElement, null, textArray, 4);
    writeOn(writeOnElement, text);

  </script>



</body>
</html>